# Automatically generate or expand function or method docstrings with
# parameter annotations.
#
# Used in conjuction with sphinx.ext.autodoc (before) and
# sphinx.ext.napoleon + sphinx_autodoc_typehints (after) to solve the
# problem of type annotations not generated by sphinx_autodoc_typehints
# unless :param:s are explicitly laid out.
#
# Assumes and generates Google-style docstrings.

import importlib
import inspect


def setup(app):
    app.setup_extension("sphinx.ext.autodoc")
    app.connect("autodoc-process-docstring", _process_docstring)
    return {"parallel_read_safe": True}


def _process_docstring(app, what, name, obj, options, lines):
    if "Args:" in lines:
        return
    if what == "class":
        module = _get_object_by_name(name)
        try:
            func = module.__init__
        except AttributeError:
            return
        insert_before = "Attributes:"
    elif what in ["function", "method"]:
        func = _get_object_by_name(name)
        insert_before = "Returns:"
    else:
        return
    params = _get_param_list(func)
    if not params:
        return
    new_lines = _format_params(params)
    try:
        anchor = lines.index(insert_before)
        lines[anchor:anchor] = new_lines
    except ValueError:
        lines.extend(new_lines)


def _get_object_by_name(qualname):
    tokens = qualname.split(".")
    # Assume no packages are involved, so modules are exactly one level
    # deep.
    obj = importlib.__import__(tokens[0])
    for token in tokens[1:]:
        obj = getattr(obj, token)
    return obj


def _get_param_list(callable):
    params = list(inspect.signature(callable).parameters.keys())
    if params and params[0] in ("self", "cls"):
        params = params[1:]
    # Suppress useless param list (*args, **kwargs)
    if params == ['args', 'kwargs']:
        return []
    return params


def _format_params(params):
    return ["", "Args:"] + ["    %s:" % param for param in params] + [""]
